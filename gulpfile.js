'use strict';

var gulp = require('gulp');
var del = require('del');
var gutil = require('gulp-util');
var inject = require('gulp-inject');
var rev = require('gulp-rev');
var sass = require('gulp-sass');
var sourcemaps = require('gulp-sourcemaps');


var STATIC_DIR    = 'pepysdiary/common/static';
var TEMPLATES_DIR = 'pepysdiary/templates/common';

var PATHS = {
  src: {
    sassFiles:  STATIC_DIR + '/src/sass/**/*.scss'
  },
  dest: {
    cssDir:     STATIC_DIR + '/css',
    cssFiles:   STATIC_DIR + '/css/**/*.css'
  },
  templates: {
    files:      [TEMPLATES_DIR + '/base.html']
  }
};


/**
 * Delete any existing files generated by this script.
 */
gulp.task('clean', function() {
  // .css and .css.map
  return del(PATHS.dest.cssFiles + '*');
});


/**
 * Create CSS file from Sass files.
 * Create a sourcemap file.
 * Add a revision code to each file.
 */
gulp.task('sass', gulp.series('clean', function buildSass() {
  var sassOptions = {
    outputStyle: 'compressed',
    sourceComments: false
  };

  return gulp.src(PATHS.src.sassFiles)
    .pipe(sourcemaps.init())
    .pipe(sass(sassOptions).on('error', sass.logError))
    .pipe(rev())
    .pipe(gulp.dest(PATHS.dest.cssDir))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(PATHS.dest.cssDir));
}));


/**
 * Add links to generated CSS files into templates.
 */
gulp.task('inject', function doInjection() {
  var target = gulp.src(PATHS.templates.files);

  var sources = gulp.src([
    PATHS.dest.cssFiles
  ], {read: false});

  /**
   * Add Django 'static' formatting.
   */
  var transformFunc = function(filepath) {
    if (filepath.slice(-3) === '.js') {
      return '<script src="{% static \'' + filepath + '\' %}"></script>';
    } else if (filepath.slice(-4) === '.css') {
      return '<link href="{% static \'' + filepath + '\' %}" rel="stylesheet">';
    }
    // Default:
    return inject.transform.apply(inject.transform, arguments);
  };

  var options = {
    ignorePath: '/' + STATIC_DIR + '/',
    addRootSlash: false,
    transform: transformFunc
  };

  return target
    .pipe(inject(sources, options))
    .pipe(gulp.dest(TEMPLATES_DIR))
});


gulp.task('sass:watch', function () {
  // Must have usePolling if running this in a VM, and editing the files on
  // the host, because changes won't be noticed otherwise.
  gulp.watch(PATHS.src.sassFiles, {usePolling: true}, gulp.series(
    'sass',
    'inject'
  ));
});


gulp.task('watch', gulp.parallel('sass:watch'));


gulp.task('default', gulp.series(
  gulp.parallel('sass'),
  'inject'
));

